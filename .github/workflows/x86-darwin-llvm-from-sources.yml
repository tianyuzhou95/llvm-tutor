name: x86-Darwin-llvm-from-sources

on:
  schedule:
    - cron:  '0 0 * * *'

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
      - name: Download Ninja
        shell: cmake -P {0}
        run: |
          # The following steps are implemented using CMake commands
          set(ninja_version "1.9.0")
          set(ninja_suffix "mac.zip")
          set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
          file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

          if (NOT "${{ runner.os }}" STREQUAL "Windows")
            execute_process(
            COMMAND chmod +x ninja
            )
          endif()
      - name: Build LLVM
        run: |
          # Adding the location of Ninja to $PATH
          export PATH=$GITHUB_WORKSPACE:$PATH
          git clone --depth 1 --single-branch --branch release/10.x https://github.com/llvm/llvm-project
          cd llvm-project
          git checkout release/10.x
          mkdir build && cd build
          cmake -G Ninja -D CMAKE_MAKE_PROGRAM=$GITHUB_WORKSPACE/ninja \
            -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS="clang" \
            -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_OPTIMIZED_TABLEGEN=ON \
            ../llvm
          # Note that only the required tools are built
          ninja clang opt lli not FileCheck
      - name: Install lit
        run: |
          sudo pip install lit
      - name: Build HelloWorld
        run: |
          cd HelloWorld
          mkdir build && cd build
          cmake -DLT_LLVM_INSTALL_DIR="$GITHUB_WORKSPACE/llvm-project/build" -DLT_OPT_PIPELINE_REG=On ../
          make -j2
      - name: Build llvm-tutor + run tests
        run: |
          mkdir build && cd build
          cmake -DLT_LLVM_INSTALL_DIR="$GITHUB_WORKSPACE/llvm-project/build" -DLT_OPT_PIPELINE_REG=On ../
          make -j2
          lit test/
